# ‚öôÔ∏è –§–∏–Ω–∞–ª—å–Ω—ã–π main.py —Å PDF, –∞–¥–º–∏–Ω–∫–æ–π, /–æ—Ç—á—ë—Ç, –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π –∏ –≤—Å–µ–º –Ω—É–∂–Ω—ã–º
import telebot
from telebot import types
import json
from datetime import datetime, timedelta
import threading
import time
from scanner import compare_all_exchanges
from fpdf import FPDF

API_TOKEN = '8065004819:AAHsCVYP1dKWrZU8FGjSrd1UrOeBpcI5KZk'
ADMIN_ID = 7833365313
bot = telebot.TeleBot(API_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã
try:
    with open("vip_users.json", "r") as f:
        vip_users = json.load(f)
except:
    vip_users = {}

def save_vip():
    with open("vip_users.json", "w") as f:
        json.dump(vip_users, f)

def clean_expired_vips():
    today = datetime.now().strftime("%Y-%m-%d")
    expired = [uid for uid, date in vip_users.items() if date < today]
    for uid in expired:
        del vip_users[uid]
    if expired:
        save_vip()

clean_expired_vips()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add("üîÅ –°–≤—è–∑–∫–∏", "üëë VIP")
main_menu.add("üíé –ü–æ–¥–ø–∏—Å–∫–∞", "üìò –ü–æ–º–æ—â—å")
main_menu.add("üë§ –ú–æ–π ID")

@bot.message_handler(commands=['start'])
def start(message):
    name = message.from_user.first_name or "–¥—Ä—É–≥"
    bot.send_message(message.chat.id,
        f"üîÆ <b>P2P SCANNER BOT</b>\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{name}</b>!",
        parse_mode="HTML", reply_markup=main_menu)

@bot.message_handler(func=lambda msg: msg.text == "üîÅ –°–≤—è–∑–∫–∏")
@bot.message_handler(commands=['—Å–≤—è–∑–∫–∏'])
def svyazki(message):
    bot.send_message(message.chat.id,
        "üß† –≠—Ç–æ –¥–µ–º–æ. –ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vip")

@bot.message_handler(func=lambda msg: msg.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
@bot.message_handler(commands=['–ø–æ–¥–ø–∏—Å–∫–∞'])
def subs(message):
    text = (
        "üíé <b>VIP –ü–æ–¥–ø–∏—Å–∫–∞:</b>\n\n"
        "üîπ 1 –¥–µ–Ω—å ‚Äî 500 KGS\nüîπ 7 –¥–Ω–µ–π ‚Äî 2500 KGS\nüîπ 30 –¥–Ω–µ–π ‚Äî 7500 KGS\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ VISA: <code>4021 8300 5087 1042</code>\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n\n"
        "ü§ñ –ë–æ—Ç: @P2p_sng_bot"
    )
    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(func=lambda msg: msg.text == "üëë VIP")
@bot.message_handler(commands=['vip'])
def vip(message):
    uid = str(message.chat.id)
    today = datetime.now().strftime("%Y-%m-%d")
    if uid in vip_users and vip_users[uid] >= today:
        results = compare_all_exchanges()
        bot.send_message(message.chat.id, "\n".join(results))
    else:
        bot.send_message(message.chat.id,
            "üîí –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø–æ–¥–ø–∏—Å–∫–∞", parse_mode="HTML")

@bot.message_handler(func=lambda msg: msg.text == "üë§ –ú–æ–π ID")
@bot.message_handler(commands=['–º–æ–π_–ø—Ä–æ—Ñ–∏–ª—å'])
def profile(message):
    uid = str(message.chat.id)
    name = message.from_user.first_name
    until = vip_users.get(uid, "–Ω–µ—Ç")
    status = "‚úÖ –î–æ " + until if until >= datetime.now().strftime("%Y-%m-%d") else "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
    text = f"üë§ <b>{name}</b>\nID: <code>{uid}</code>\n–°—Ç–∞—Ç—É—Å: {status}"
    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(commands=['–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'])
def activate(message):
    msg = bot.send_message(message.chat.id, "üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (VIP-1, VIP-7, VIP-30):")
    bot.register_next_step_handler(msg, process_code)

def process_code(message):
    code = message.text.strip().upper()
    days_map = {"VIP-1": 1, "VIP-7": 7, "VIP-30": 30}
    if code in days_map:
        uid = str(message.chat.id)
        until = (datetime.now() + timedelta(days=days_map[code])).strftime("%Y-%m-%d")
        vip_users[uid] = until
        save_vip()
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {until}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")

# PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
class PDF(FPDF):
    def header(self):
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "P2P Profit Report", ln=True, align="C")
        self.set_font("Arial", "", 10)
        self.cell(0, 10, datetime.now().strftime("%Y-%m-%d %H:%M"), ln=True, align="C")
        self.ln(5)
    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, "Telegram bot: @P2p_sng_bot", 0, 0, "C")
    def chapter(self, title, body):
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, title, ln=True)
        self.set_font("Arial", "", 11)
        self.multi_cell(0, 8, body)

@bot.message_handler(commands=['–æ—Ç—á—ë—Ç'])
def report(message):
    uid = str(message.chat.id)
    if uid not in vip_users or vip_users[uid] < datetime.now().strftime("%Y-%m-%d"):
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è VIP")
        return
    results = compare_all_exchanges()
    clean = [r.replace("‚Üí", ">").replace("%", "").replace("üí∞", "Profit:") for r in results]
    pdf = PDF()
    pdf.add_page()
    pdf.chapter("Top Arbitrage Opportunities:", "\n\n".join(clean))
    path = f"report_{uid}.pdf"
    pdf.output(path)
    with open(path, "rb") as f:
        bot.send_document(message.chat.id, f, visible_file_name="P2P_SCANNER_Report.pdf")

# –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
@bot.message_handler(commands=['–¥–æ–±–∞–≤–∏—Ç—å_vip'])
def addvip(message):
    if message.chat.id != ADMIN_ID: return
    try:
        parts = message.text.split()
        uid, days = parts[1], int(parts[2])
        until = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d")
        vip_users[uid] = until
        save_vip()
        bot.send_message(message.chat.id, f"‚úÖ {uid} ‚Üí VIP –¥–æ {until}")
    except:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /–¥–æ–±–∞–≤–∏—Ç—å_vip chat_id –¥–Ω–∏")

@bot.message_handler(commands=['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
def stats(message):
    total = len(vip_users)
    today = datetime.now().strftime("%Y-%m-%d")
    active = sum(1 for d in vip_users.values() if d >= today)
    bot.send_message(message.chat.id,
        f"üìä –í—Å–µ–≥–æ VIP: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}")

@bot.message_handler(commands=['–ø–æ–º–æ—â—å'])
@bot.message_handler(func=lambda msg: msg.text == "üìò –ü–æ–º–æ—â—å")
def helpmsg(message):
    text = (
        "/start ‚Äî –∑–∞–ø—É—Å–∫\n/vip ‚Äî —Å–≤—è–∑–∫–∏\n/–º–æ–π_–ø—Ä–æ—Ñ–∏–ª—å ‚Äî —Å—Ç–∞—Ç—É—Å\n/–æ—Ç—á—ë—Ç ‚Äî PDF\n/–ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å\n/–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚Äî –≤–≤–µ—Å—Ç–∏ –∫–æ–¥\n/–¥–æ–±–∞–≤–∏—Ç—å_vip ‚Äî –≤—Ä—É—á–Ω—É—é\n/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫ VIP")
    bot.send_message(message.chat.id, text)

# –ê–≤—Ç–æ–ø–∏–Ω–≥

def auto_vip_ping():
    while True:
        now = datetime.now()
        if now.hour in [10, 18] and now.minute == 0:
            today = datetime.now().strftime("%Y-%m-%d")
            for uid, date in vip_users.items():
                if date >= today:
                    bot.send_message(uid, "üîî –ü—Ä–æ–≤–µ—Ä—å /vip ‚Äî –Ω–æ–≤—ã–µ P2P-—Å–≤—è–∑–∫–∏")
            time.sleep(60)
        time.sleep(30)

threading.Thread(target=auto_vip_ping, daemon=True).start()

bot.polling()
